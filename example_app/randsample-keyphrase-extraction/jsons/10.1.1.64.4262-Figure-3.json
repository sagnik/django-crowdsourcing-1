{"Caption":"Figure 3: Example of trace annotation. In this example, node 0 is writing to a file that node 1 is reading. By delay- ing I\/O on node 0, the dependency can be exposed. Node 1 will block, waiting on node 0 to signal (through one of a number of possible mechanisms) that the file has been closed. Once the dependency has been discovered, the I\/O traces are anno- tated with SIGNAL() and WAIT() calls that can be replayed. In addition, computation time can be added as COMPUTE() calls. ","ImageText":[{"Text":"Time","TextBB":[112.967,102.878,139.083,113.053],"Rotation":0},{"Text":"Node","TextBB":[148.967,100.878,176.416,111.053],"Rotation":0},{"Text":"0","TextBB":[179.633,100.878,185.749,111.053],"Rotation":0},{"Text":"(Throttled)","TextBB":[188.967,100.878,244.63,111.053],"Rotation":0},{"Text":"fh","TextBB":[148.967,128.857,162.233,137.503],"Rotation":0},{"Text":"=","TextBB":[168.967,128.857,175.567,137.503],"Rotation":0},{"Text":"open(\u201Cfoo\u201D)","TextBB":[182.3,128.857,254.9,137.503],"Rotation":0},{"Text":"COMPUTE()","TextBB":[148.967,142.191,208.567,150.837],"Rotation":0},{"Text":"write(fh,","TextBB":[148.967,155.524,208.567,164.17],"Rotation":0},{"Text":"\u2026)","TextBB":[215.3,155.524,228.567,164.17],"Rotation":0},{"Text":"COMPUTE()","TextBB":[148.967,168.857,208.567,177.503],"Rotation":0},{"Text":"write(fh,","TextBB":[148.967,182.191,208.567,190.837],"Rotation":0},{"Text":"\u2026)","TextBB":[215.3,182.191,228.567,190.837],"Rotation":0},{"Text":"COMPUTE()","TextBB":[148.967,195.524,208.567,204.17],"Rotation":0},{"Text":"close(fh)","TextBB":[148.967,208.857,208.567,217.503],"Rotation":0},{"Text":"SIGNAL(1)","TextBB":[148.967,222.191,208.567,230.837],"Rotation":0},{"Text":"COMPUTE()","TextBB":[148.967,235.524,208.567,244.17],"Rotation":0},{"Text":"Node","TextBB":[296.3,100.878,323.749,111.053],"Rotation":0},{"Text":"1","TextBB":[326.967,100.878,333.083,111.053],"Rotation":0},{"Text":"(Blocking)","TextBB":[336.3,100.878,390.63,111.053],"Rotation":0},{"Text":"WAIT(0)","TextBB":[296.3,235.524,342.9,244.17],"Rotation":0},{"Text":"fh","TextBB":[296.3,248.857,309.567,257.503],"Rotation":0},{"Text":"=","TextBB":[316.3,248.857,322.9,257.503],"Rotation":0},{"Text":"COMPUTE()","TextBB":[296.3,262.524,355.9,271.17],"Rotation":0},{"Text":"read(fh,","TextBB":[296.3,275.857,349.233,284.503],"Rotation":0},{"Text":"\u2026)","TextBB":[355.967,275.857,369.233,284.503],"Rotation":0},{"Text":"COMPUTE()","TextBB":[296.3,289.191,355.9,297.837],"Rotation":0},{"Text":"close(fh)","TextBB":[296.3,302.524,355.9,311.17],"Rotation":0},{"Text":"COMPUTE()","TextBB":[296.3,315.857,355.9,324.503],"Rotation":0}],"Mention":["In general, one can automatically discover the data de-\npendencies across all nodes by throttling each node in\nturn. When a node is being throttled, its I\/O is delayed\nuntil all other nodes either exit or block\/spin on an event.\nIf a node exits, then it is obviously not dependent on the\nnode being throttled. Conversely, any node that blocks\nmust have some data dependency, perhaps only indi-\nrectly, with the throttled node. To reflect these dependen-\ncies, the throttled node will add a SIGNAL() to its trace\nand the blocking nodes will add a corresponding WAIT()\nto their traces. Figure 3 illustrates an example.\n","Of course, delaying I\/O in this manner can produce in-\ndirect dependencies. For example, referring back to\nFigure 3, a sampling period of 1 will indicate that the\nopen() call for node 1 is dependent on each I\/O from\nnode 0; namely, the open(), the two write() calls,\nand the close() \u2014 and the traces will be annotated as\nsuch to reflect this. However, the only signal needed is\nthat following the close() operation, and the redundant\n"],"Page":5,"Number":3,"Type":"Figure","CaptionBB":[98,342,412,462],"Height":1100,"Width":850,"DPI":100,"ImageBB":[110,98,401,326]}