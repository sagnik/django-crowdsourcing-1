{"Caption":"Figure 9: Exception-less system call cost on a single-core.","ImageText":[{"Text":"Time","TextBB":[132.554,359.162,142.551,380.02],"Rotation":3},{"Text":"(nanoseconds)","TextBB":[132.554,293.37,142.551,356.813],"Rotation":3},{"Text":"flexsc","TextBB":[343.538,288.003,368.653,297.999],"Rotation":0},{"Text":"sync","TextBB":[343.538,299.565,363.772,309.562],"Rotation":0},{"Text":"0","TextBB":[157.313,385.679,161.84,394.767],"Rotation":0},{"Text":"10","TextBB":[185.69,385.679,194.769,394.767],"Rotation":0},{"Text":"20","TextBB":[216.307,385.679,225.427,394.767],"Rotation":0},{"Text":"30","TextBB":[246.965,385.679,256.044,394.767],"Rotation":0},{"Text":"40","TextBB":[277.622,385.679,286.701,394.767],"Rotation":0},{"Text":"50","TextBB":[308.239,385.679,317.359,394.767],"Rotation":0},{"Text":"60","TextBB":[338.897,385.679,348.016,394.767],"Rotation":0},{"Text":"70","TextBB":[369.554,385.679,378.633,394.767],"Rotation":0},{"Text":"Number","TextBB":[202.831,397.564,236.509,407.56],"Rotation":0},{"Text":"of","TextBB":[238.847,397.564,247.32,407.56],"Rotation":0},{"Text":"batched","TextBB":[249.828,397.564,283.964,407.56],"Rotation":0},{"Text":"requests","TextBB":[286.436,397.564,323.473,407.56],"Rotation":0},{"Text":"90","TextBB":[147.541,278.48,156.661,287.567],"Rotation":0},{"Text":"80","TextBB":[147.541,289.554,156.661,298.641],"Rotation":0},{"Text":"70","TextBB":[147.541,300.628,156.661,309.715],"Rotation":0},{"Text":"60","TextBB":[147.541,311.702,156.661,320.79],"Rotation":0},{"Text":"50","TextBB":[147.541,322.776,156.661,331.864],"Rotation":0},{"Text":"40","TextBB":[147.541,333.851,156.661,342.938],"Rotation":0},{"Text":"30","TextBB":[147.541,344.966,156.661,354.053],"Rotation":0},{"Text":"20","TextBB":[147.541,356.04,156.661,365.127],"Rotation":0},{"Text":"10","TextBB":[147.541,367.114,156.661,376.201],"Rotation":0},{"Text":"0","TextBB":[152.142,378.229,156.669,387.316],"Rotation":0}],"Mention":["ing back to the user-thread, and retrieving the return value\nfrom the syscall page entry. To measure this overhead,\nwe created a micro-benchmark that successively invokes a\ngetppid() system call. Since the user and kernel foot-\nprints of this call is small, the time measured corresponds\nto the direct cost of issuing system calls.\nWe varied the number of batched system calls, in the\nexception-less case, to verify if the direct costs are amor-\ntized when batching an increasing number of calls. The\nresults obtained executing on a single core are shown in\nFigure 9. The baseline time, show as a horizontal line, is\nthe time to execute an exception-based system call on a\nsingle core. Executing a single exception-less system call\non a single core is 43% slower than a synchronous call.\nHowever, when batching 2 or more calls there is no over-\nhead, and when batching 32 or more calls, the execution\nof each call is up to 130% faster than a synchronous call.\nWe also measured the time to execute system calls on\na remote core (Figure 10). In addition to the single core\noperations, remote core execution entails sending an inter-\nprocessor interrupt (IPI) to wake up the remote syscall\nthread. In the remote core case, the time to issue a sin-\ngle exception-less system call can be more than 10 times\nslower than a synchronous system call on the same core.\nThis measurement represents a worst case scenario when\nthere is no currently executing syscall thread. Despite the\nhigh overhead, the overhead on remote core execution is\nrecouped when batching 32 or more system calls.\n","It is particularly interesting to compare Figure 16 with\nfigures 9 and 10. The direct cost of mode switching, ex-\nemplified by the micro-benchmark, has a lesser effect on\nperformance when compared to the indirect cost of mix-\ning user- and kernel-mode execution.\n"],"Page":9,"Number":9,"Type":"Figure","CaptionBB":[107,427,399,440],"Height":1100,"Width":850,"DPI":100,"ImageBB":[132,277,381,409]}