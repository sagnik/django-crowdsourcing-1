{"Caption":"Figure 12. Aggregation query costs for random rectangle regions. (a) Average Costs, (b) Max costs ","ImageText":[{"Text":"400","TextBB":[74.2475,129.64,85.9312,136.119],"Rotation":0},{"Text":"300","TextBB":[74.2475,144.964,85.9312,151.443],"Rotation":0},{"Text":"200","TextBB":[74.2475,160.322,85.9312,166.801],"Rotation":0},{"Text":"LLS","TextBB":[199.126,169.078,211.588,175.557],"Rotation":0},{"Text":"Forms","TextBB":[199.126,178.162,218.97,184.642],"Rotation":0},{"Text":"100","TextBB":[74.2475,175.68,85.9312,182.16],"Rotation":0},{"Text":"0","TextBB":[82.0546,191.04,85.9491,197.519],"Rotation":0},{"Text":"0","TextBB":[85.2647,196.185,89.1593,202.664],"Rotation":0},{"Text":"2000","TextBB":[108.869,196.185,124.447,202.664],"Rotation":0},{"Text":"4000","TextBB":[138.347,196.185,153.925,202.664],"Rotation":0},{"Text":"6000","TextBB":[167.825,196.185,183.403,202.664],"Rotation":0},{"Text":"8000","TextBB":[197.301,196.185,212.88,202.664],"Rotation":0},{"Text":"Network","TextBB":[132.437,202.824,165.533,209.018],"Rotation":0},{"Text":"Size","TextBB":[170.261,202.824,189.174,209.018],"Rotation":0},{"Text":"10000","TextBB":[224.846,196.185,244.319,202.664],"Rotation":0},{"Text":"2500","TextBB":[261.297,101.476,276.875,107.956],"Rotation":0},{"Text":"LLS","TextBB":[305.915,97.0985,318.376,103.578],"Rotation":0},{"Text":"Forms","TextBB":[305.915,106.182,325.759,112.661],"Rotation":0},{"Text":"2000","TextBB":[261.297,119.389,276.875,125.868],"Rotation":0},{"Text":"1500","TextBB":[261.297,137.303,276.875,143.782],"Rotation":0},{"Text":"1000","TextBB":[261.297,155.214,276.875,161.693],"Rotation":0},{"Text":"500","TextBB":[265.201,173.128,276.885,179.607],"Rotation":0},{"Text":"0","TextBB":[273.008,191.04,276.903,197.519],"Rotation":0},{"Text":"0","TextBB":[276.219,196.185,280.114,202.664],"Rotation":0},{"Text":"2000","TextBB":[299.494,196.185,315.073,202.664],"Rotation":0},{"Text":"4000","TextBB":[328.608,196.185,344.187,202.664],"Rotation":0},{"Text":"6000","TextBB":[357.721,196.185,373.299,202.664],"Rotation":0},{"Text":"8000","TextBB":[386.833,196.185,402.412,202.664],"Rotation":0},{"Text":"Network","TextBB":[322.515,202.824,355.612,209.018],"Rotation":0},{"Text":"Size","TextBB":[360.34,202.824,379.253,209.018],"Rotation":0},{"Text":"500","TextBB":[74.2475,114.282,85.9312,120.761],"Rotation":0},{"Text":"3000","TextBB":[261.297,83.5999,276.875,90.0791],"Rotation":0},{"Text":"600","TextBB":[74.2475,98.9221,85.9312,105.401],"Rotation":0},{"Text":"Max","TextBB":[253.131,196.514,259.325,210.699],"Rotation":3},{"Text":"Rectangle","TextBB":[253.131,149.233,259.325,191.786],"Rotation":3},{"Text":"Aggregation","TextBB":[253.131,92.4959,259.325,144.505],"Rotation":3},{"Text":"Mean","TextBB":[66.0802,179.967,72.274,198.879],"Rotation":3},{"Text":"Aggregate","TextBB":[66.0802,132.686,72.274,175.239],"Rotation":3},{"Text":"Query","TextBB":[66.0802,104.317,72.274,127.958],"Rotation":3},{"Text":"Cost","TextBB":[66.0802,80.6765,72.274,99.5889],"Rotation":3},{"Text":"700","TextBB":[74.2475,83.5999,85.9312,90.0791],"Rotation":0}],"Mention":["(a) (b)\nFigure 12. Aggregation query costs for random rectangle regions.\n(a) Average Costs, (b) Max costs\n","The details of the methods are in section 4.3. With a location sever\nscheme, the process is a little more complicated.\nLLSmaintains a quad-tree hierarchy, and recursively tracks nodes\ninside the quads at different levels. To find the aggregate, we need\nto look at quads of different levels that intersect withR. In particu-\nlar, if a quad Q intersects the boundary ∂R, that means sub-quads\nof Q need to be analyzed further, to see which targets inside Q\nare actually insideR. Therefore, the method boils down to finding\nquads at all levels that contain targets and intersect ∂R. This turns\nout to be reasonably costly.\nFigure 12 shows the costs when R is a random rectangle inside\nthe network region. Figure 13 shows the corresponding costs when\nR is a random circle. Clearly, location server based schemes incurs\na substantial cost in this type of query. Note that for target search-\ning LLS actually uses a different quadtree hierarchy for each target.\nThis would be impractically expensive in this sort of query, where\nthe presence of each target in R will then have to be checked indi-\nvidually, driving the costs very high. We therefore used a common\nhierarchy where a location server can provide information about all\ntargets in its quad region. Even with this modification, the costs of\nour scheme are still much lower, in principle only proportional to\nthe size of the boundary ofR.\n"],"Page":10,"Number":12,"Type":"Figure","CaptionBB":[73,225,407,251],"Height":1100,"Width":850,"DPI":100,"ImageBB":[64,74,427,226]}