{"Caption":"Figure 1: Execution plan and outer buffers.","ImageText":[{"Text":"Checkpoint","TextBB":[713.31,82.6241,752.84,89.6473],"Rotation":0},{"Text":"here","TextBB":[750.947,82.6241,766.779,89.6473],"Rotation":0},{"Text":"maps","TextBB":[713.31,91.4835,732.629,98.5067],"Rotation":0},{"Text":"to","TextBB":[731.592,91.4835,739.748,98.5067],"Rotation":0},{"Text":"very","TextBB":[739.568,91.4835,755.397,98.5067],"Rotation":0},{"Text":"old","TextBB":[755.215,91.4835,765.097,98.5067],"Rotation":0},{"Text":"checkpoint","TextBB":[713.31,100.395,751.09,107.418],"Rotation":0},{"Text":"of","TextBB":[749.201,100.395,759.077,107.418],"Rotation":0},{"Text":"child","TextBB":[713.31,109.254,728.815,116.278],"Rotation":0},{"Text":"Cursor","TextBB":[625.128,92.6685,649.574,99.6917],"Rotation":0},{"Text":"Outer-input","TextBB":[579.285,112.242,619.245,119.265],"Rotation":0},{"Text":"buffers","TextBB":[586.393,121.256,611.281,128.279],"Rotation":0},{"Text":"NLJ","TextBB":[707.129,122.971,728.835,132.336],"Rotation":0},{"Text":"0","TextBB":[724.848,126.654,728.273,132.881],"Rotation":0},{"Text":"NLJ","TextBB":[501.833,133.028,524.208,141.989],"Rotation":0},{"Text":"0","TextBB":[524.167,137.375,529.678,144.001],"Rotation":0},{"Text":"✘","TextBB":[488.5,147.162,502.337,153.25],"Rotation":0},{"Text":"✘","TextBB":[502.333,143.662,516.17,149.75],"Rotation":0},{"Text":"❳❳","TextBB":[516.167,143.662,543.837,153.25],"Rotation":0},{"Text":"❳","TextBB":[533.833,147.995,547.67,154.084],"Rotation":0},{"Text":"✘","TextBB":[484.667,147.995,498.504,154.084],"Rotation":0},{"Text":"Sc","TextBB":[530.667,158.028,550.808,166.989],"Rotation":0},{"Text":"a","TextBB":[543.653,158.028,556.639,166.989],"Rotation":0},{"Text":"n","TextBB":[549.483,158.028,562.469,166.989],"Rotation":0},{"Text":"T","TextBB":[556,162.331,562.528,169.334],"Rotation":0},{"Text":"NLJ","TextBB":[470.333,158.028,492.708,166.989],"Rotation":0},{"Text":"1","TextBB":[492.667,162.375,498.178,169.001],"Rotation":0},{"Text":"Cursor","TextBB":[590.565,156.796,615.011,163.819],"Rotation":0},{"Text":"NLJ","TextBB":[671.64,167.371,693.346,176.736],"Rotation":0},{"Text":"1","TextBB":[689.359,171.054,692.785,177.281],"Rotation":0},{"Text":"✦","TextBB":[463.667,173.495,477.504,179.584],"Rotation":0},{"Text":"✦","TextBB":[470.833,170.662,484.67,176.75],"Rotation":0},{"Text":"❛❛","TextBB":[484.667,170.662,505.67,179.584],"Rotation":0},{"Text":"Sc","TextBB":[446.5,182.862,466.641,191.822],"Rotation":0},{"Text":"a","TextBB":[459.486,182.862,472.472,191.822],"Rotation":0},{"Text":"n","TextBB":[465.317,182.862,478.303,191.822],"Rotation":0},{"Text":"R","TextBB":[471.833,187.164,480.163,194.167],"Rotation":0},{"Text":"Sc","TextBB":[489,182.862,509.141,191.822],"Rotation":0},{"Text":"a","TextBB":[501.986,182.862,514.972,191.822],"Rotation":0},{"Text":"n","TextBB":[507.817,182.862,520.803,191.822],"Rotation":0},{"Text":"S","TextBB":[514.333,187.164,521.123,194.167],"Rotation":0}],"Mention":["Example 2 (Need for asynchronous checkpointing). Suppose we\nneed to suspend the plan in Figure 1, at the time t2 depicted in\n","Example 3 (Need for suspend-time optimization). Suppose NLJ1\nin Figure 1 produces joining tuples very infrequently, i.e., its join\n","Example 1 (Running example). Figure 1 shows a simple execu-\ntion plan forR.\/S .\/ T consisting of two block-based nested loop\njoins (NLJ for short) [6] and three table scans. We will use this\noperator tree as a running example in this paper. During each it-\neration of an NLJ outer loop, the operator \u0002rst reads output tuples\nfrom the outer child to \u0002ll a large in-memory outer buffer, and then\nperforms joins while reading tuples from the inner child. The con-\ntent of the outer buffer constitutes the in-memory heap state of the\nNLJ. Figure 2 shows how the amount of heap state changes with\ntime for the two NLJs. The child NLJ \u0002rst \u0002lls up its outer buffer,\nthen its total state plateaus while it reads its inner child and pro-\nduces R .\/ S tuples to \u0002ll the parent NLJ's outer buffer. When the\nparent NLJ's outer buffer is full, this operator reads from its inner\nchild and produces R.\/S .\/T tuples. When the inner child has ex-\nhausted its output, the NLJ discards its state and begins rebuilding\nits outer buffer with the next batch of child tuples.\n","shown in Figure 1. The corresponding suspend point is also indi-\ncated in Figure 4. Assume that the suspend plan selected is one\n","erators as seen in Figure 4. NLJ1\n","Suspend Plan and Performance We create a complex plan in-\nvolving 10 operators, as shown in Figure 11 (left). Table R con-\ntains 2:2 million tuples, while the selectivity of the \u0002lter is set to\n0:1. The outer buffers of NLJ and the sort buffers have a size of\n200; 000 tuples. We suspend query execution when the upper NLJ\noperator is around 85% full. The online optimizer chooses the sus-\npend plan shown to the right of Figure 11. This optimal plan is\nneither of the two extremes (all-GoBack and all-DumpState). It is\na combination of different strategies for different operators.\nIn Figure 13, we compare the performance of the online sus-\npend plan against all-GoBack and all-DumpState, in terms of total\nquery overhead and overhead at suspension. We see that the online\napproach using the hybrid suspend plan is able to perform much\nbetter than the purist techniques.\n"],"Page":2,"Number":1,"Type":"Figure","CaptionBB":[489,196,722,217],"Height":1100,"Width":850,"DPI":100,"ImageBB":[444,79,767,197]}