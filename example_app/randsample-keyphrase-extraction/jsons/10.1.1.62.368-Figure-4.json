{"Caption":"Figure 4. An example to show the data structure of ULC for a 3-level hierarchy. The blocks with their recencies less than that of yardstick             are kept in                                                  . The                                                        ☞       ✒   ✦     ✧   ★      ✏                             ✣   ✤                          ✝                      ✁   ☎     ✫ level status ( ,       or         ) of a block is determined by its                ✦ ✭ ✦ ✯    ✦                               ✤ position between two yardsticks where it was accessed last time. Its recency status ( ,                  or                  ) is determined                                        ✧ ✭ ✧   ✯         ✧                                                                  ✤ by its position between two yardsticks where it sits cur- rently. To decide which block should be replaced in each level, the blocks in the same level can be viewed to be or- ganized in a separate LRU stack (                        ,                       , or                 ),                                              ✦   ✧ ★ ✭       ✦       ✧     ★   ✯          ✦   ✧   ★                                                                                                     ✤ and the bottom block is for replacement. ","ImageText":[{"Text":"uniLRUstack","TextBB":[546.889,349.051,597.371,356.158],"Rotation":0},{"Text":"LRU1","TextBB":[639.881,349.507,663.548,356.614],"Rotation":0},{"Text":"LRU2","TextBB":[688.327,349.507,711.993,356.614],"Rotation":0},{"Text":"LRU3","TextBB":[733.434,349.964,757.101,357.07],"Rotation":0},{"Text":"2","TextBB":[571.159,368.919,577.004,377.696],"Rotation":0},{"Text":"8","TextBB":[647.595,372.546,653.439,381.322],"Rotation":0},{"Text":"2","TextBB":[697.279,372.464,703.124,381.241],"Rotation":0},{"Text":"4","TextBB":[742.343,373.331,748.19,382.109],"Rotation":0},{"Text":"5","TextBB":[647.69,392.567,653.534,401.344],"Rotation":0},{"Text":"7","TextBB":[698.147,392.606,703.992,401.383],"Rotation":0},{"Text":"11","TextBB":[740.113,393.41,751.806,402.189],"Rotation":0},{"Text":"3","TextBB":[647.926,413.204,653.771,421.981],"Rotation":0},{"Text":"12","TextBB":[694.453,413.034,706.146,421.813],"Rotation":0},{"Text":"9","TextBB":[742.233,414.457,748.08,423.235],"Rotation":0},{"Text":"10","TextBB":[567.674,387.719,579.361,396.494],"Rotation":0},{"Text":"8","TextBB":[570.217,406.32,576.061,415.096],"Rotation":0},{"Text":"1","TextBB":[569.716,425.814,575.563,434.593],"Rotation":0},{"Text":"5","TextBB":[569.702,445.076,575.546,453.853],"Rotation":0},{"Text":"7","TextBB":[569.531,464.713,575.376,473.491],"Rotation":0},{"Text":"4","TextBB":[569.161,505.226,575.008,514.005],"Rotation":0},{"Text":"Y1","TextBB":[521.273,525.21,532.841,532.316],"Rotation":0},{"Text":"3","TextBB":[570.54,524.086,576.384,532.863],"Rotation":0},{"Text":"L2","TextBB":[691.111,524.753,701.629,531.86],"Rotation":0},{"Text":"block","TextBB":[703.995,524.753,725.03,531.86],"Rotation":0},{"Text":"11","TextBB":[568.047,545.386,579.741,554.165],"Rotation":0},{"Text":"L3","TextBB":[689.998,544.833,700.515,551.94],"Rotation":0},{"Text":"block","TextBB":[702.882,544.833,723.917,551.94],"Rotation":0},{"Text":"Y2","TextBB":[520.717,564.001,532.285,571.108],"Rotation":0},{"Text":"6","TextBB":[569.572,563.71,575.418,572.488],"Rotation":0},{"Text":"Lout","TextBB":[689.441,565.827,707.324,572.933],"Rotation":0},{"Text":"block","TextBB":[709.69,565.827,730.725,572.933],"Rotation":0},{"Text":"Y3","TextBB":[520.717,585.45,532.285,592.557],"Rotation":0},{"Text":"9","TextBB":[570.727,584.681,576.573,593.459],"Rotation":0},{"Text":"L1","TextBB":[690.557,501.021,701.075,508.128],"Rotation":0},{"Text":"block","TextBB":[703.441,501.021,724.476,508.128],"Rotation":0},{"Text":"Yardstick","TextBB":[509.024,507.75,543.974,516.005],"Rotation":0},{"Text":"12","TextBB":[565.819,484.231,577.513,493.01],"Rotation":0},{"Text":"6","TextBB":[696.527,432.278,702.373,441.056],"Rotation":0}],"Mention":["In Section 2.2 we have shown the LLD-R measure is a\npromising basis on which to build a multi-level caching pro-\ntocol. However, an implementation exactly based on LLD-\nR ranking criterion will take at least O(log \u0002 ) time, where \u0002\nis the number of distinct accessed blocks. This is the cost\nof block ordering. In order to develop an efﬁcient algorithm\nwith the time complexity \u0006 \u0007 \u0011 \b , we transform the process to\ndetermine the position of a block in LLD-R ordered list into\ntwo separate steps: (1) When a block gets accessed, its re-\ncency is 0, so its LLD-R is LLD, which is the recency at\nwhich it was just accessed. We use the LLD to determine in\nwhich segment the block will be cached at the time of re-\ntrieval. (2) Once a block is assigned into a speciﬁc segment,\nwe use R to determine its position in the segment. Each seg-\nment corresponds to a level of cache, and the size of the seg-\nment is the same as that of the cache.\nAs is shown in Figure 4, the recently accessed blocks are\nmaintained in an uniﬁed LRU stack, simpliﬁed as \u000F \u0002 \n \u0000 \t \n -\n\u0007\n\u0010\nﬃ \u0006 \u000B . These blocks could be cached in any level of buffer\ncaches, or even not cached4. For each level of buffer cache\n"],"Page":5,"Number":4,"Type":"Figure","CaptionBB":[481,608,785,780],"Height":1100,"Width":850,"DPI":100,"ImageBB":[435,322,804,602]}