{"Caption":"Figure 4: Spurious timeout for multihomed SCTP endpoints (a) primary interface (b) secondary interface","ImageText":[{"Text":"(the","TextBB":[333.054,371.628,353.771,382.878],"Rotation":0},{"Text":"problem","TextBB":[356.887,371.628,402.133,382.878],"Rotation":0},{"Text":"of","TextBB":[405.221,371.628,415.55,382.878],"Rotation":0},{"Text":"congestion","TextBB":[418.721,371.628,475.004,382.878],"Rotation":0},{"Text":"window","TextBB":[478.054,371.628,519.579,382.878],"Rotation":0},{"Text":"overgrowth)","TextBB":[523.054,371.628,588.883,382.878],"Rotation":0},{"Text":"(a)","TextBB":[158.887,467.384,174.327,479.834],"Rotation":0},{"Text":"(b)","TextBB":[484.887,466.217,501.16,478.667],"Rotation":0}],"Mention":["Another situation of a spurious timeout in a multihomed \nSCTP association is demonstrated in Figure 4. Due to either \nsignificantly different round trip times on the primary and \nalternate paths or due to an extended delay spike on the primary \npath, it is possible that the SCTP sender does the entire Go-Back-\nN retransmissions on the alternate path before even the original \ntransmissions reach the SCTP receiver. In Figure 4 a delay spike \nof sufficient length is introduced to cause this scenario.  \n","The Eifel algorithm [LM03] uses TCP\u2019s timestamp option \n[JBB92] to resolve the retransmission ambiguity and determine if \na retransmission was spurious. The original proposal of the Eifel \nalgorithm [LK00] also had the option of using a new bit called the \n\u201Cretransmit bit\u201D to resolve the retransmission ambiguity. SCTP on \nthe other hand lacks both of these signaling mechanisms.  \nWe propose either adding a per-packet timestamp chunk \nextension to SCTP (first described in [CAI+03]), or a new \n\u201Cretransmit bit\u201D in the SCTP DATA and SACK chunks. \nTimestamps cost 12 bytes overhead for every packet, but have the \nadvantage of being useful for other mechanisms apart from the \nEifel algorithm, such as Round Trip Time Measurement (RTTM) \ndefined in [JBB92]. We have developed extensions to the Eifel \nalgorithm for SCTP considering both of these signaling \nmechanisms. The algorithm using either a timestamp chunk or a \nretransmit bit is outlined in Figure 6. Also specified in Figure 6 \nare the rules for transmitting and echoing the retransmit bit. \nThe first extension to the Eifel algorithm introduces \u201Ccover \nacks\u201D (see Figure 6). A \u201Ccover ack\u201D is an ack that acknowledges \n(via the cum-ack field) all data up to the highest TSN \nretransmitted. A \u201Ccover ack\u201D is required to avoid incorrectly \ninterpreting congestion-based losses as spurious timeouts, as \nchunk bundling in SCTP allows retransmitting more than one \nTSN in the same packet (restricted by the PMTU). Figure 5 \ndepicts a scenario where an SCTP sender using the Eifel \nalgorithm as described in [LM03] would incorrectly interpret \ncongestion loss as a spurious fast retransmission. In Figure 5, \nwhen SACK 11(2-5) is received (an acceptable ACK), the Eifel-\nenabled sender would conclude that the retransmission containing \nDATA 11 and DATA 12 was spurious. However, this would \nsuppress the real congestion based loss of DATA 12 (which had \nbeen bundled and retransmitted with DATA 11). A \u201Ccover ack\u201D \nensures that false positives as described in this example are not \ngenerated. \nThe second extension to the Eifel algorithm is to cater to the \nretransmission policy in multihomed hosts in SCTP. As shown in \nFigure 4, it is possible to do a complete Go-Back-N recovery on \nan alternate path even before the series of original transmissions \nreaches an SCTP receiver. An SCTP sender will be unable to \ndetect the timeout spurious until duplicate notifications arrive \nfrom the receiver. The solution is an optional extension that calls \nfor integrating the DupTSN-based algorithm as defined in [BA04] \nwith the Eifel algorithm to yield a more robust spurious \nretransmission detection algorithm. \nApart from the above, we have further added a new state \n\u201CAckRcvd\u201D to the Eifel Algorithm (the timestamp variant) that \navoids any known corner cases, and also makes the algorithm \nrobust for the case where all acks for the original transmissions \nare lost (see section 3.3 in [LM03]). \n","be possible to perform the entire Go-Back-N recovery on the \nalternate path even before the series of original transmissions \nreaches the SCTP receiver. For a scenario where the \nretransmission overtakes the original transmission, we extended \nthe Eifel algorithm to rely on DupTSN reports to detect spurious \nretransmissions. Thus, as seen from Figure 13(a), the Eifel and \nDupTSN-based algorithms exhibit similar performance and do not \npresent any noticeable benefits in performance over plain SCTP. \nFigure 13(b) shows the number of unnecessary \nretransmissions with plain SCTP, SCTP with the Eifel algorithm, \nand SCTP with DupTSN-based detection in a singlehomed SCTP \nconfiguration. As expected, the Eifel algorithm reduces the \nnumber of unnecessary retransmissions significantly. This is \nbecause an Eifel-enabled sender detects spurious timeouts on the \nreceipt of the first \u201Ccover ack\u201D and prevents further unnecessary \nretransmissions. However, the DupTSN-based detection does not \ndetect a spurious retransmission until having received all DupTSN \nreports, and is therefore unable to avoid unnecessary \nretransmissions. \nFigure 14 shows the time taken for a 4M transfer with delay \nspikes of length 3-10s, occurring in intervals of 10-20s. In this \nsimulation we used a link bandwidth corresponding to a satellite \nlink with a bandwidth of 250Kbps, and a propagation delay of \n100ms (the previous simulations used 1Mbps and 100ms, \nrespectively). We lowered the link bandwidth to witness the effect \nof delay spikes and the gain achieved by the Eifel algorithm and \nthe DupTSN-based algorithm. Figure 14(a) shows the download \ntime in a singlehomed SCTP scenario. The Eifel algorithm \nreduces the download times by approximately 35s (~18%) in \ncomparison with plain SCTP, and by 15s (~8%) in comparison \nwith DupTSN-based detection. Figure 14(b) shows the same \ntransfer for a multihomed SCTP scenario. The Eifel algorithm \nreduces the download times by approximately 17s (~9%) in \ncomparison with plain SCTP, and by 10s (~5%) in comparison \nwith DupTSN-based detection. Note that we again used the \ntimestamp variant of Eifel, thereby introducing an additional 12 \nbyte overhead. The retransmit bit approach would eliminate the \nneed for this overhead and thus further reduce the download time. \n"],"Page":4,"Number":4,"Type":"Figure","CaptionBB":[145,657,710,670],"Height":1100,"Width":850,"DPI":100,"ImageBB":[108,369,729,633]}