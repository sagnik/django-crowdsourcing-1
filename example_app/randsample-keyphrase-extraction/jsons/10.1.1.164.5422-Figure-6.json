{"Caption":"Figure 6: The concrete data structure for NestedList","ImageText":[{"Text":"a1","Rotation":0,"TextBB":[321.721,156.715,334.321,164.968]},{"Text":"b1","Rotation":0,"TextBB":[321.721,209.215,334.321,217.468]},{"Text":"b2","Rotation":0,"TextBB":[365.471,209.215,378.071,217.468]},{"Text":"b3","Rotation":0,"TextBB":[409.221,209.215,421.821,217.468]},{"Text":"d1","Rotation":0,"TextBB":[365.471,252.965,378.071,261.218]},{"Text":"d2","Rotation":0,"TextBB":[409.221,252.965,421.821,261.218]},{"Text":"c1","Rotation":0,"TextBB":[461.721,209.215,474.321,217.468]},{"Text":"c2","Rotation":0,"TextBB":[505.471,209.215,518.071,217.468]},{"Text":"d3","Rotation":0,"TextBB":[452.971,252.965,465.571,261.218]}],"Mention":["Based on these requirements, we design the data structure as shown in Figure 6. Each returning node\nis associated with a linked list (a is associated with list a1, etc.), where new element is inserted at the\nend. We say that this linked list is connected by sibling pointers (indicated by _ arrows in Figure 6). If a\nreturning node has k children in the BlossomTree, it includes an array of size k, containing pointers to the\nlist associated with its children. We call these pointers child pointers (indicated by â†’ arrows in Figure 6).\nIn addition to these pointers, a pointer to the last child, a pointer to its parent, a pointer to the next node in\ndocument order are also added to facilitate efficient navigation. To avoid clogging the graph, we omit them\nin Figure 6, but readers should keep in mind that they are associated with each node in the data structure.\nGiven a returning tree, the resulting NestedList can be constructed as shown in Algorithm 2. Parameters\np and q of the algorithm are NoK pattern tree nodes that are both returning nodes and p is a child of q. x\nis an XML tree node. Before invoking the algorithm, a prerequisite is that p matches with x.\nThis algorithm is an extension of the NoK pattern matching algorithm [22]: instead of returning only one\nlist, it keeps a list of resulting nodes on each returning node and maintains the hierarchical structure between\nthem. It traverses the XML tree in depth-first order (through First-Child and Following-Sibling in\nlines 8 and 19). During the traversal, it also recursively matches the NoK pattern tree node and builds up\na list of matchings for each returning node. Each recursive call (lines 13 and 14) represents a matching of\na NoK subtree against an XML subtree. In the algorithm, the sibling pointers and children pointers are\nestablished in lines 2 to 5. The frontier children mentioned in line 7 are the children of a NoK pattern tree\n"],"Type":"Figure","Number":6,"Page":13,"CaptionBB":[262,287,580,303],"Height":1100,"Width":850,"DPI":100,"ImageBB":[315,153,530,271]}