{"Caption":"Figure 4: The results for Postmark on Reiserfs, 1\u201332 threads","ImageText":[{"Text":"Reiserfs","TextBB":[491.185,294.175,518.025,300.946],"Rotation":0},{"Text":"(Elapsed)","TextBB":[520.06,294.175,551.38,300.946],"Rotation":0},{"Text":"Reiserfs","TextBB":[502.178,301.495,529.018,308.265],"Rotation":0},{"Text":"(User)","TextBB":[531.053,301.495,551.379,308.265],"Rotation":0},{"Text":"Reiserfs","TextBB":[493.226,308.814,520.067,315.585],"Rotation":0},{"Text":"(System)","TextBB":[522.102,308.814,551.379,315.585],"Rotation":0},{"Text":"70","TextBB":[455.407,304.336,463.546,311.107],"Rotation":0},{"Text":"Time","TextBB":[439.506,392.697,446.276,408.961],"Rotation":3},{"Text":"(seconds)","TextBB":[439.506,358.53,446.276,390.663],"Rotation":3},{"Text":"60","TextBB":[455.407,328.577,463.546,335.347],"Rotation":0},{"Text":"50","TextBB":[455.407,352.86,463.546,359.63],"Rotation":0},{"Text":"40","TextBB":[455.407,377.1,463.546,383.871],"Rotation":0},{"Text":"30","TextBB":[455.407,401.34,463.546,408.111],"Rotation":0},{"Text":"20","TextBB":[455.407,425.581,463.546,432.351],"Rotation":0},{"Text":"10","TextBB":[455.407,449.821,463.546,456.592],"Rotation":0},{"Text":"0","TextBB":[459.476,474.061,463.546,480.832],"Rotation":0},{"Text":"0","TextBB":[466.92,481.381,470.989,488.151],"Rotation":0},{"Text":"5","TextBB":[504.722,481.381,508.792,488.151],"Rotation":0},{"Text":"10","TextBB":[540.49,481.381,548.63,488.151],"Rotation":0},{"Text":"15","TextBB":[578.293,481.381,586.432,488.151],"Rotation":0},{"Text":"20","TextBB":[616.096,481.381,624.235,488.151],"Rotation":0},{"Text":"25","TextBB":[653.899,481.381,662.038,488.151],"Rotation":0},{"Text":"30","TextBB":[691.701,481.381,699.841,488.151],"Rotation":0},{"Text":"35","TextBB":[729.504,481.381,737.643,488.151],"Rotation":0},{"Text":"Threads","TextBB":[586.824,492.36,613.671,499.13],"Rotation":0}],"Mention":["A sample line graph can be seen in Figure 4. This\ngraph shows the results from Postmark running on top\nof Reiserfs with 1\u201332 threads. The elapsed time de-\ncreases as threads are added, because the kernel can bet-\nter schedule I\/O operations. However, the user and sys-\ntem CPU time remained relatively constant because the\nsame amount of work is being done.\nThis graph was generated with the following com-\nmand line:\n","566 characters (a savings of 70%). More importantly,\nGraphit creates a properly-formatted Gnuplot data file\nfor the actual series.\nCreating bar graphs in Gnuplot is not straightforward.\nRather than defining series and values as is done in other\nplotting tools, you must create an artificial x-axis and lo-\ncate each bar and its label along this axis. To properly\nspace and locate these bars without automated tools is te-\ndious. Graphit automatically constructs this artificial x-\naxis and spaces the bars appropriately. Using command-\nline arguments, the width of the bars, the gap between\neach bar, the gap between each group of bars, and sev-\neral other parameters can be controlled easily. An exam-\nple Graphit bar graph is shown in Figure 5. This graph\nshows the same Postmark results for Ext2, Ext3, and\nReiserfs that are shown in Figures 2 and 4. Graphit au-\ntomatically reads the results files, stacks user CPU time\nover system CPU time; determines bar widths, spacing,\nand error bars; formats a Gnuplot data file; generates a\nGnuplot script; and finally runs Gnuplot. We ran the fol-\nlowing command to generate the graph:\n"],"Page":9,"Number":4,"Type":"Figure","CaptionBB":[434,515,743,529],"Height":1100,"Width":850,"DPI":100,"ImageBB":[437,288,740,500]}