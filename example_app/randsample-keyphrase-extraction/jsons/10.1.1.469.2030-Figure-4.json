{"Caption":"Figure 4: Comparison of different request rate pre- diction algorithms ","ImageText":[{"Text":"65","TextBB":[101.253,124.709,114.441,136.083],"Rotation":0},{"Text":"60","TextBB":[101.253,157.819,114.441,169.192],"Rotation":0},{"Text":"Energy","TextBB":[84.3608,226.781,95.7343,264.353],"Rotation":3},{"Text":"Savings","TextBB":[84.3608,181.299,95.7343,223.484],"Rotation":3},{"Text":"(%)","TextBB":[84.3608,159.56,95.7343,178.002],"Rotation":3},{"Text":"70","TextBB":[101.253,91.5995,114.441,102.973],"Rotation":0},{"Text":"55","TextBB":[101.253,190.927,114.441,202.301],"Rotation":0},{"Text":"50","TextBB":[101.253,224.136,114.441,235.509],"Rotation":0},{"Text":"45","TextBB":[101.253,257.245,114.441,268.619],"Rotation":0},{"Text":"MWA","TextBB":[315.822,264.855,344.807,276.229],"Rotation":0},{"Text":"LA","TextBB":[315.822,279.384,330.327,290.758],"Rotation":0},{"Text":"EWAâˆ’CR","TextBB":[315.822,293.913,366.89,305.287],"Rotation":0},{"Text":"EWA","TextBB":[315.822,308.441,342.839,319.815],"Rotation":0},{"Text":"40","TextBB":[101.253,290.355,114.441,301.729],"Rotation":0},{"Text":"35","TextBB":[101.253,323.563,114.441,334.937],"Rotation":0},{"Text":"0","TextBB":[114.596,333.545,121.19,344.919],"Rotation":0},{"Text":"0.2","TextBB":[173.996,333.545,190.481,344.919],"Rotation":0},{"Text":"0.4","TextBB":[238.336,333.545,254.821,344.919],"Rotation":0},{"Text":"0.6","TextBB":[302.678,333.545,319.163,344.919],"Rotation":0},{"Text":"Violations","TextBB":[178.837,347.679,230.249,359.052],"Rotation":0},{"Text":"(%","TextBB":[233.546,347.679,248.039,359.052],"Rotation":0},{"Text":"of","TextBB":[251.336,347.679,261.227,359.052],"Rotation":0},{"Text":"requests)","TextBB":[264.524,347.679,313.955,359.052],"Rotation":0},{"Text":"0.8","TextBB":[367.019,333.545,383.504,344.919],"Rotation":0}],"Mention":["We use 7 days of HTTP traffic data from a trace consist-\ning of a 10% sample of the total Wikipedia.org traffic[21] as\nour workload for comparison. We run the trace in a simu-\nlation program, used to compare and evaluate provisioning\npolicies. For simulation, we assume a fixed response time\nand a maximum request rate per system. These parame-\nters are set empirically by using microbenchmarks. We take\nthe maximum request rate with a response time of less than\n300ms for the the Wikipedia workload on each system. We\nalso use power estimates based on the results in Figure 1.\nWe use a simulator to compare the different server provi-\nsioning algorithms in Figure 4. The figure shows a tradeoff\nbetween energy savings and the number of \u201Cviolations.\u201D As\nseen in Figure 1, when the load on the cluster increases be-\nyond the knee of the response time curve, the response times\nincrease dramatically, thus we attempt to always operate be-\nlow this point. We label all requests that come in at a rate\nabove the knee as\u201Cviolations\u201Dto indicate that they may have\nresponse times that are above the desired maximum.\nThe standard approach to capacity planning is to pro-\nvision for twice the peak load, and the y-axis of Figure 4\ndenotes the savings over this baseline. We vary how aggres-\nsive the cluster manager is in turning off machines along\nthe length of the curve. This yeilds a range of tradeoffs\nbetween energy savings and the number of \u201Cviolations.\u201D At\nthe lower-left point of the curve the cluster manager is most\nconservative with few violations but also lower energy sav-\nings; moving to the upper-right, it becomes more aggressive\nwith more violations and improved energy savings. We note\nthat the moving window average performs the best. When\ncompared to an oracle provisioning algorithm, which always\nachieves maximal utilization by knowing future workload,\nthe moving window average performs within 10% of opti-\nmal.\n"],"Page":5,"Number":4,"Type":"Figure","CaptionBB":[73,390,407,418],"Height":1100,"Width":850,"DPI":100,"ImageBB":[82,89,385,361]}