{"Caption":"Figure 3. ID method and Score method","ImageText":[],"Mention":["by decreasing score instead of increasing ID \u2013 this ordering\nis required by efficient top\u2013\u0001 query processing algorithms\nsuch as [11, 24, 25, 27, 29]. Here, each posting contains the\ndocument score in addition to the document ID since the\ninverted lists are sorted and merged in score order (note that\nwe cannot simply use the document score as the document\nID because scores can change in our setting). Figure 3(b)\nshows this inverted list organization for the term news.\nScore updates are very inefficient in this method. When\nthe score of a document \u0013 is updated, the new score has to\nbe updated in the inverted list for every distinct term in \u0013.\nThis is likely to be very expensive because documents usu-\nally have hundreds to thousands of terms, and each update\nrequires a random probe in the inverted list. In addition,\nsince the inverted list for each term is ordered by the score,\nthe ordering of the postings may have to be updated too.\nHowever, top\u2013\u0001 queries can be processed very efficiently\nusing the techniques proposed in [11, 24] since the inverted\nlists are in decreasing score order.\n","The ID method builds an inverted list for each term \u0011, where\neach inverted list entry (posting) contains the ID of a doc-\nument containing the term \u0011. The postings for each term\nare sorted in increasing ID order. This data structure is one\nof the most commonly used in IR systems [12, 26]. In ad-\ndition, a Score table is used to store the ID and score of\neach document (there is only one such table for the entire\ncollection, not one per term). In fact this can be the same\nmaterialized view Score that stores SVR scores (see Sec-\ntion 3.2). An index is built on the ID column of this table so\nthat score lookups by ID are efficient. Figure 3(a) shows an\nexample inverted list for the term news and the Score table.\nScore updates are very efficient in this method; when the\nscore of a document is updated, we only need to update the\nscore for the document in the Score table. Query process-\ning, however, is more expensive. Given a query with terms\n\u0001\n\u0001\n\u0004 \u0005\u0005\u0005\u0004 \u0001\n\u0001\n, we need to merge the \u0012 lists corresponding to the\nquery terms and determine the IDs of the documents that\n"],"Page":4,"Number":3,"Type":"Figure","CaptionBB":[464,253,720,268],"Height":1100,"Width":850,"DPI":100,"ImageBB":[465,98,713,250]}